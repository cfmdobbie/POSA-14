package edu.vuum.mocca;

import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;

/**
 * @class SimpleSemaphore
 * 
 * @brief This class provides a simple counting semaphore
 *        implementation using Java a ReentrantLock and a
 *        ConditionObject (which is accessed via a Condition). It must
 *        implement both "Fair" and "NonFair" semaphore semantics,
 *        just liked Java Semaphores.
 */
public class SimpleSemaphore {
    /**
     * Define a ReentrantLock to protect the critical section.
     */
    // TODO - you fill in here
	// NOTE: Good practice to declare fields final where possible
	private final ReentrantLock mLock;

    /**
     * Define a Condition that waits while the number of permits is 0.
     */
    // TODO - you fill in here
	// NOTE: Good practice to declare fields final where possible
	private final Condition mCondition;

    /**
     * Define a count of the number of available permits.
     */
    // TODO - you fill in here.  Make sure that this data member will
    // ensure its values aren't cached by multiple Threads..
	// NOTE: Field declared volatile to ensure threads always see the most up-to-date version
	private volatile int mAvailablePermits;

    public SimpleSemaphore(int permits, boolean fair) {
        // TODO - you fill in here to initialize the SimpleSemaphore,
        // making sure to allow both fair and non-fair Semaphore
        // semantics.
    	// NOTE: Create the ReentrantLock with requested fairness parameter
    	mLock = new ReentrantLock(fair);
    	// NOTE: Create new condition instance to use with the lock
    	mCondition = mLock.newCondition();
    	// NOTE: Initialize the number of available permits (volatile field, no locking required)
    	mAvailablePermits = permits;
    }

    /**
     * Acquire one permit from the semaphore in a manner that can be
     * interrupted.
     */
    public void acquire() throws InterruptedException {
        // TODO - you fill in here.
    	// NOTE: The acquire() method is supposed to be interruptible, so we need to use the
    	// interruptible version of the lock() method
    	mLock.lockInterruptibly();
    	try {
    		// NOTE: Note that the test is not just "== 0" but "<= 0".  This is more
    		// comprehensive than just "== 0", so protects against out-of-range initial
    		// values of mAvailablePermits
        	while(mAvailablePermits <= 0) {
        		mCondition.await();
        	}
        	// NOTE: Prefix ops are theoretically more efficient than postfix ops, due to
        	// not having to retain a temporary variable.  In practice, it's likely the
        	// Java compiler will optimise any difference away, but may as well be more
        	// efficient where we can!
        	--mAvailablePermits;
    	} catch(InterruptedException e) {
    		// NOTE: We're declaring InterruptedException as a checked exception, and we're
    		// only waking up one thread at a time; if the only awake thread exceptions out
    		// we need to make sure another will wake up.  In this particular instance,
    		// "--mAvailablePermits" cannot exception so we're safe - but let's do the right
    		// thing anyway!
    		mCondition.signal();
    		// ...And then re-throw the exception
    		throw e;
    	} finally {
    		// NOTE: We unlock in a finally block to ensure that whatever happens in the rest
    		// of the code, we'll still release the lock
    		mLock.unlock();
    	}
    }

    /**
     * Acquire one permit from the semaphore in a manner that cannot be
     * interrupted.
     */
    public void acquireUninterruptibly() {
        // TODO - you fill in here.
    	mLock.lock();
    	try {
    		while(mAvailablePermits <= 0) {
    			mCondition.awaitUninterruptibly();
    		}
    		--mAvailablePermits;
    	} finally {
    		mLock.unlock();
    	}
    }

    /**
     * Return one permit to the semaphore.
     */
    public void release() {
        // TODO - you fill in here.
    	mLock.lock();
    	try {
    		++mAvailablePermits;
    		// NOTE: In case mAvailablePermits starts off negative, even though we've just
    		// returned one to the pool the number available may not be a positive number.
    		// Should check whether permits are available before signalling any threads.
    		if(mAvailablePermits > 0) {
        		// NOTE: We're using signal() not signalAll() because we're only returning
        		// one permit to the pool, so we only want to wake up one waiting thread.
        		mCondition.signal();
    		}
    	} finally {
    		mLock.unlock();
    	}
    }

    /**
     * Return the number of permits available.
     */
    public int availablePermits() {
        // TODO - you fill in here by changing null to the appropriate
        // return value.
    	// NOTE: Do not need to lock/unlock to access this value as field is declared volatile
    	return mAvailablePermits;
    }
}
